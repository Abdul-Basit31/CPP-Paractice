-What is Object Oriented Programming?

Object Oriented Programming:
Object-oriented programming (OOP) in C++ is an approach to programming that utilizes the principles of object-oriented programming within the C++ programming language. C++ is a multi-paradigm language that supports procedural programming as well as object-oriented programming.

In C++, OOP is achieved through the use of classes and objects. A class serves as a blueprint or template for creating objects, defining their structure and behavior. Objects are instances of classes, and they encapsulate data (attributes) and operations (methods) that manipulate that data.

-Difference between Structure and Class?

Class is by default Private and Structure is by default Public.

-What is static members variable?
Static member variables in C++ are shared among all objects of a class. They have a single instance and retain their value across objects, with a default initialization to zero.

-What is Constructor?
Constructor:

Constructor in C++ is a special method that is invoked automatically at the time of object creation. It is used to initialize the data members of new objects generally. The constructor in C++ has the same name as the class or structure. Constructor is invoked at the time of object creation. It constructs the values i.e. provides data for the object which is why it is known as constructors.

• Constructor is a member function of a class, whose name is same as the class name.
• Constructor is a special type of member function that is used to initialize the data members for an object of a class automatically, when an object of the same class is created.
• Constructor is invoked at the time of object creation. It constructs the values i.e. provides data for the object that is why it is known as constructor.
• Constructor do not return value, hence they do not have a return type.

-What is Destructor?

Destructor is an instance member function that is invoked automatically whenever an object is going to be destroyed. Meaning, a destructor is the last function that is going to be called before an object is destroyed.

* A destructor is also a special member function like a constructor. Destructor destroys the    class objects created by the constructor. 
* Destructor has the same name as their class name preceded by a tilde (~) symbol.
   It is not possible to define more than one destructor. 
* The destructor is only one way to destroy the object created by the constructor. Hence    destructor can-not be overloaded.
* Destructor neither requires any argument nor returns any value.
   It is automatically called when an object goes out of scope. 
* Destructor release memory space occupied by the objects created by the constructor.
* In destructor, objects are destroyed in the reverse of an object creation.
The thing is to be noted here if the object is created by using new or the constructor uses new to allocate memory that resides in the heap memory or the free store, the destructor should use delete to free the memory.   